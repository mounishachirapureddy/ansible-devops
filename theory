history --system admins----installed softwares ,application dependent software to keep them up to date and maintainance
          problem --- all managed nodes of different OS

later Alterantaives-- puppet ,chef,salt,ansible
      puppet and chef--- disadvantages-- need to learn languages and they are not agentless(even in each controlled nodes we have to install puppet/chef)
      Ansible--prerequsities --controlled nodes should have python,and yaml language
                               for windows you need wsl(windows subsystem for linux)

What is Ansible ?
Ansible is an open source IT automation engine that automates 
- provisioning --- creating infrastructure
- configuration management----Configuration= Software & Hardware props of server,Management= Installing, deleting, updating 
- application deployment
- orchestration
- networking
and many other IT processes. It is free to use, and the project benefits from the experience and intelligence of its thousands of contributors.

How Ansible works ?
Ansible is agentless in nature, which means you don't need install any software on the manage nodes.
For automating Linux and Windows, Ansible connects to managed nodes and pushes out small programs—called Ansible modules—to them. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules (over SSH by default), and removes them when finished. These modules are designed to be idempotent when possible, so that they only make changes to a system when necessary.
For automating network devices and other IT appliances where modules cannot be executed, Ansible runs on the control node. Since Ansible is agentless, it can still communicate with devices without requiring an application or service to be installed on the managed node.

Comparison with Shell Scripting
- Shell Scripting works only for Linux.
- Becomes complex and less readable(for non-experts) as the script size goes high.
- Idempotence and predictability
When the system is in the state your playbook describes Ansible does not change anything, even if the playbook runs multiple times.
for example, run the below shell script twice and you will notice the script will fail. Which means shell scripting is not idempotent in nature.
```
#/bin/bash
set -e 
mkdir test-demo
echo "hi"
```
- Scalability and flexibility
Easily and quickly scale the systems you automate through a modular design that supports a large range of operating systems, cloud platforms, and network devices.

PASSWORDLESS LOGIN--
--> generally, two ways to login into managed nodes 1)password 2)ssh keys
ANSIBLE INVENTORY--
-->file contains user name and ip addresses
-->can be written in2 ways 1)inventory.ini eg: in noraml file we write ubuntu@12.33.222.222(managed nodes) 2)yaml--/etc/ansible/hosts
-----------------------
commands--1)playbook 2)ad-hoc commands
-----------------
Yaml--- why?? we can give input in -- txt format ,yaml format, json format
(to check --yaml lint)
starts with ---(3 iphens)
--------
playbook is collection of plays which contains tasks containing modules(commands)(eg:ansible.builtin.apt--to install)
become: true -->run with a root user
---------
ANSIBLE GALAXY--market place for ansible roles
command-- ansible-galaxy role -h <command>
          ls ~/.ansible/roles-->to check the installed roles
how to upload from your git repository to ansible galaxy ??
commands--
----------------------
ROLES
ansible-galaxy role init test
----------------
gathering facts-- y??
idempotent---- characterstic of ansible ---??if something is created it will not recreate (changed=0)
---------
creating resources in aws--- talking to apis---collections
you needto have boto3 in control node to talk to amazon apis
--------
ANSIBLE VAULT --->{{----CONTENT----}}
VARS-- PRECEDENCE
