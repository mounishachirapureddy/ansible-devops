history --system admins----installed softwares ,application dependent software to keep them up to date and maintainance
          problem --- all managed nodes of different OS

later Alterantaives-- puppet ,chef,salt,ansible
      puppet and chef--- disadvantages-- need to learn languages and they are not agentless(even in each controlled nodes we have to install puppet/chef)
      Ansible--prerequsities --controlled nodes should have python,and yaml language
                               for windows you need wsl(windows subsystem for linux)
--------------------------------------------------------------------
What is Ansible ?
Ansible is an open source IT automation engine that automates 
- provisioning --- creating infrastructure
- configuration management----Configuration= Software & Hardware props of server,Management= Installing, deleting, updating 
- application deployment
- orchestration
- networking
and many other IT processes. It is free to use, and the project benefits from the experience and intelligence of its thousands of contributors.
-------------------------------------------------------------------------------------------------
How Ansible works ?
Ansible is agentless in nature, which means you don't need install any software on the manage nodes.
For automating Linux and Windows, Ansible connects to managed nodes and pushes out small programs—called Ansible modules—to them. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules (over SSH by default), and removes them when finished. These modules are designed to be idempotent when possible, so that they only make changes to a system when necessary.
For automating network devices and other IT appliances where modules cannot be executed, Ansible runs on the control node. Since Ansible is agentless, it can still communicate with devices without requiring an application or service to be installed on the managed node.
--------------------------------------------------------------------------------------
Comparison with Shell Scripting
- Shell Scripting works only for Linux.
- Becomes complex and less readable(for non-experts) as the script size goes high.
- Idempotence and predictability
When the system is in the state your playbook describes Ansible does not change anything, even if the playbook runs multiple times.
for example, run the below shell script twice and you will notice the script will fail it says test-demo already exist. Which means shell scripting is not idempotent in nature.
but in ansible it runs task but it doesnot fail but shows not changed (0) it means task is executed but not created
```
#/bin/bash
set -e 
mkdir test-demo
echo "hi"```
- Scalability and flexibility
Easily and quickly scale the systems you automate through a modular design that supports a large range of operating systems, cloud platforms, and network devices.
--------------------------------------------------------------------------------------
PASSWORDLESS LOGIN--once you login ,next on wards noneed to give password as input
--> generally, two ways to login into managed nodes 1)password 2)ssh keys(using pvt key)
How to setup Passwordless Authentication
EC2 Instances
 Using Public Key

```
ssh-copy-id -f "-o IdentityFile <PATH TO PEM FILE>" ubuntu@<INSTANCE-PUBLIC-IP>
```

- ssh-copy-id: This is the command used to copy your public key to a remote machine.
- -f: This flag forces the copying of keys, which can be useful if you have keys already set up and want to overwrite them.
- "-o IdentityFile <PATH TO PEM FILE>": This option specifies the identity file (private key) to use for the connection. The -o flag passes this option to the underlying ssh command.
- ubuntu@<INSTANCE-IP>: This is the username (ubuntu) and the IP address of the remote server you want to access.

### Using Password 

- Go to the file `/etc/ssh/sshd_config.d/60-cloudimg-settings.conf`
- Update `PasswordAuthentication yes`(update this wherever in the ssh folder)
- Restart SSH -> `sudo systemctl restart ssh`
-------------------------------------------------------------------------------------------------------------------------------
ANSIBLE INVENTORY--
-->file contains user name and ip addresses
-->can be written in2 ways 1)inventory.ini eg: in noraml file we write ubuntu@12.33.222.222(managed nodes) 2)yaml--/etc/ansible/hosts
   ansible -i inventory.ini -m ping all [-m = module,-i = inventory,-a = arguments]
    ansible -i inventory.ini -m ping ubuntu@12.33.222.222
   
# Inventory 

Ansible inventory file is a fundamental component of Ansible that defines the hosts (remote systems) that you want to manage and the groups those hosts belong to. The inventory file can be static (a simple text file) or dynamic (generated by a script). It provides Ansible with the information about the remote nodes to communicate with during its operations.

## Static Inventory

A static inventory file is typically a plain text file (usually named hosts or inventory) and is structured in INI or YAML format. Here are examples of both formats:

### INI Format

```
# inventory file: hosts

[webservers]
ubuntu@12.33.222.22

[dbservers]
ubuntu@12.33.222.21

[all:vars]
ansible_user=admin
ansible_ssh_private_key_file=/path/to/key
```

### YAML

```
# inventory file: hosts.yaml

all:
  vars:
    ansible_user: admin
    ansible_ssh_private_key_file: /path/to/key
  children:
    webservers:
      hosts:
        web1.example.com:
        web2.example.com:
    dbservers:
      hosts:
        db1.example.com:
        db2.example.com:
```

## Dynamic Inventory

A dynamic inventory is generated by a script or plugin and can be used for environments where hosts are constantly changing (e.g., cloud environments). The script or plugin fetches the list of hosts from a source like AWS, GCP, or any other dynamic source.

Here is an example of a dynamic inventory script for AWS EC2:

```
#!/usr/bin/env python

import json
import boto3

def get_aws_ec2_inventory():
    ec2 = boto3.client('ec2')
    instances = ec2.describe_instances()
    inventory = {
        'all': {
            'hosts': [],
            'vars': {
                'ansible_user': 'ec2-user',
                'ansible_ssh_private_key_file': '/path/to/key'
            }
        },
        '_meta': {
            'hostvars': {}
        }
    }

    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            if instance['State']['Name'] == 'running':
                public_ip = instance['PublicIpAddress']
                inventory['all']['hosts'].append(public_ip)
                inventory['_meta']['hostvars'][public_ip] = {
                    'ansible_host': public_ip
                }

    print(json.dumps(inventory, indent=2))

if __name__ == '__main__':
    get_aws_ec2_inventory()
```

## Usage

```
ansible-playbook -i inventory <Adhoc command or Playbook.yml>
```
-----------------------
commands--1)playbook 2)ad-hoc commands
-----------------
Yaml--- why?? we can give input in -- txt format ,yaml format, json format but in txt format the inputs may different ways 
(to check --yaml lint)
starts with ---(3 iphens)
# Understanding YAML

YAML (YAML Ain't Markup Language) is a human-readable data serialization format that is commonly used for configuration files and data exchange between languages with different data structures.

## YAML Syntax

### Strings, Numbers and Booleans:

```
string: Hello, World!
number: 42
boolean: true
```

### List 

```
fruits:
  - Apple
  - Orange
  - Banana
```

### Dictionary 

```
person:
  name: John Doe
  age: 30
  city: New York
```

### List of dictionaries 

YAML allows nesting of lists and dictionaries to represent more complex data.

```
family:
  parents:
    - name: Jane
      age: 50
    - name: John
      age: 52
  children:
    - name: Jimmy
      age: 22
    - name: Jenny
      age: 20
```
--------
playbook is collection of plays which contains tasks containing modules(commands)(eg:ansible.builtin.apt--to install)
become: true -->run with a root user
---
- hosts: all
  become: true
  tasks:
    - name: Install apache httpd
      ansible.builtin.apt:
        name: apache2
        state: present
        update_cache: yes
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: index.html
        dest: /var/www/html
        owner: root
        group: root
        mode: '0644'
# Ansible Concepts: Playbook, Play, Modules, Tasks, and Collections

## Playbook
A **Playbook** is a YAML file that defines a series of actions to be executed on managed nodes. It contains one or more "plays" that map groups of hosts to roles.

### Example
```
---
- name: Update web servers
  hosts: webservers
  remote_user: root

  tasks:
  - name: Ensure apache is at the latest version
    ansible.builtin.yum:
      name: httpd
      state: latest

  - name: Write the apache config file
    ansible.builtin.template:
      src: /srv/httpd.j2
      dest: /etc/httpd.conf

- name: Update db servers
  hosts: databases
  remote_user: root

  tasks:
  - name: Ensure postgresql is at the latest version
    ansible.builtin.yum:
      name: postgresql
      state: latest

  - name: Ensure that postgresql is started
    ansible.builtin.service:
      name: postgresql
      state: started
```

## Play

A Play is a single, complete execution unit within a playbook. It specifies which hosts to target and what tasks to execute on those hosts. Plays are used to group related tasks and execute them in a specific order.

```
- name: Install and configure Nginx
  hosts: webservers
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: present
```

## Modules

Modules are the building blocks of Ansible tasks. They are small programs that perform a specific action on a managed node, such as installing a package, copying a file, or managing services.
Example

The apt module used in a task to install a package:

```
- name: Install Nginx
  apt:
    name: nginx
    state: present
```

## Tasks

Tasks are individual actions within a play that use modules to perform operations on managed nodes. Each task is executed in order and can include conditionals, loops, and handlers.
      
```
- name: Install Nginx
  apt:
    name: nginx
    state: present

- name: Start Nginx service
  service:
    name: nginx
    state: started
```

## Collections

Collections are a distribution format for Ansible content. They bundle together multiple roles, modules, plugins, and other Ansible artifacts. Collections make it easier to share and reuse Ansible content.
Example

A collection structure might look like this:

```
my_collection/
├── roles/
│   └── my_role/
│       └── tasks/
│           └── main.yml
├── plugins/
│   └── modules/
│       └── my_module.py
└── README.md
```

### Using a Collection

```
- name: Use a custom module from a collection
  community.general.my_module:
    option: value
```
-----------------------------------------------------------------------------------------------
ANSIBLE GALAXY--market place for ansible roles
command-- ansible-galaxy role -h <command>
          ls ~/.ansible/roles-->to check the installed roles
         
how to upload from your git repository to ansible galaxy ??
# Push your Ansible roles to Ansible Galaxy

1. Make sure your role is structured correctly. The basic structure should look like this:

```
my_role/
├── defaults/
│   └── main.yml
├── files/
├── handlers/
│   └── main.yml
├── meta/
│   └── main.yml
├── tasks/
│   └── main.yml
├── templates/
├── tests/
│   ├── inventory
│   └── test.yml
└── vars/
    └── main.yml
```

2. Make sure ansible-galaxy CLI exists

```
ansible-galaxy --version
```

3. Push Your Role to GitHub

```
cd <role-name>
git init
git remote add origin <https://github.com/your_github_username/my_role.git>
git add .
git commit -m "Initial commit"
git push -u origin main
```

4. Import the Role to Ansible Galaxy

```
ansible-galaxy role import <your_github_username> <role-name>
Authentication error -->collections---api token(copy api token)
ansible-galaxy role import <your_github_username> <role-name> --token <--------->
```
commands--
----------------------
ROLES
ansible-galaxy role init test
----------------
gathering facts-- y??
idempotent---- characterstic of ansible ---??if something is created it will not recreate (changed=0)
---------
creating resources in aws--- talking to apis---collections
you needto have boto3 in control node to talk to amazon apis
--------
ANSIBLE VAULT --->{{----CONTENT----}}
VARS-- PRECEDENCE
